{
  "version": 3,
  "sources": ["../../../src/generators/custom/index.ts"],
  "sourcesContent": ["import jwt from 'jsonwebtoken';\n\nimport {\n  SSOGenerator,\n  AuthorizationPromisePayload,\n  PRIVKeyPromisePayload,\n} from '../../interfaces';\n\nexport default <SSOGenerator>((\n  {\n    authorizationPromise,\n    privateKeyPromise,\n  }\n) => {\n  return new Promise((resolve, reject) => {\n    try {\n      (authorizationPromise as Promise<AuthorizationPromisePayload>).then(\n        (payload: AuthorizationPromisePayload) => {\n          (privateKeyPromise as Promise<PRIVKeyPromisePayload>).then(({\n            kid: keyid,\n            pem: privateKey,\n          }) => {\n            resolve({\n              token: jwt.sign(payload, privateKey, { algorithm: 'RS256', keyid, }),\n            });\n          }).catch((e: any) => {\n            reject(e.message);\n          });\n        }\n      ).catch((e: any) => {\n        reject(e.message);\n      });\n    } catch (e: any) {\n      reject(e.message);\n    }\n  }).then((payload) => ({ payload, })).catch(((error) => ({ error, })));\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,0BAAgB;AAQhB,IAAO,iBAAuB,CAC5B;AAAA,EACE;AAAA,EACA;AAAA,MAEC;AACH,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,QAAI;AACF,MAAC,qBAA8D,KAC7D,CAAC,YAAyC;AACxC,QAAC,kBAAqD,KAAK,CAAC;AAAA,UAC1D,KAAK;AAAA,UACL,KAAK;AAAA,cACD;AACJ,kBAAQ;AAAA,YACN,OAAO,4BAAI,KAAK,SAAS,YAAY,EAAE,WAAW,SAAS;AAAA;AAAA,WAE5D,MAAM,CAAC,MAAW;AACnB,iBAAO,EAAE;AAAA;AAAA,SAGb,MAAM,CAAC,MAAW;AAClB,eAAO,EAAE;AAAA;AAAA,aAEJ,GAAP;AACA,aAAO,EAAE;AAAA;AAAA,KAEV,KAAK,CAAC,YAAa,GAAE,YAAa,MAAO,CAAC,UAAW,GAAE;AAAA;",
  "names": []
}
