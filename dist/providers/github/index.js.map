{
  "version": 3,
  "sources": ["../../../src/providers/github/index.ts"],
  "sourcesContent": ["import axios from 'axios';\n\nimport { SSOProvider, } from '../../interfaces';\nimport SSOUtils from '../../utils';\n\nexport default <SSOProvider>((\n  {\n    clientId,\n    clientSecret,\n    authKey: code,\n    retrieveProperties = ['email'],\n  },\n) => {\n  return new Promise((resolve, reject) => {\n    try {\n      if (!(clientId && clientSecret)) {\n        throw new Error('missing dev credentials');\n      }\n\n      axios(\n        {\n          url: 'https://github.com/login/oauth/access_token',\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n          },\n          data: {\n            client_id: clientId,\n            client_secret: clientSecret,\n            code,\n          },\n        },\n      ).then(SSOUtils.normalizeServerResponse)\n      .then(({access_token: apiToken}) => {\n        if (!apiToken) {\n          throw new Error('code invalid');\n        }\n\n        axios.get(\n          'https://api.github.com/user',\n          {\n            headers: {\n              'Authorization': `token ${apiToken}`,\n              'Content-Type': 'application/json',\n              'Accept': 'application/json',\n            },\n          }\n        ).then(SSOUtils.normalizeServerResponse)\n        .then((authPayload) => {\n          if (!retrieveProperties.reduce((a, b) => a && Object.keys(authPayload).includes(b), true)) {\n            throw new Error('properties missing in auth payload');\n          }\n\n          const payload: { [key: string]: { [key: string]: unknown } } = retrieveProperties.reduce(\n            (a, b) => {\n              a[b] = authPayload[b];\n              return a;\n            },\n            {} as { [key: string]: { [key: string]: unknown } },\n          );\n\n          resolve(payload);\n        }).catch((e) => {\n          reject(e.message);\n        });\n      })\n      .catch((e) => {\n        reject(e.message);\n      });\n    } catch (e: any) {\n      reject(e.message);\n    }\n  }).then((payload) => ({ payload, })).catch(((error) => ({ error, })));\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAGlB,mBAAqB;AAErB,IAAO,iBAAsB,CAC3B;AAAA,EACE;AAAA,EACA;AAAA,EACA,SAAS;AAAA,EACT,qBAAqB,CAAC;AAAA,MAErB;AACH,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,QAAI;AACF,UAAI,CAAE,aAAY,eAAe;AAC/B,cAAM,IAAI,MAAM;AAAA;AAGlB,gCACE;AAAA,QACE,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,UAAU;AAAA;AAAA,QAEZ,MAAM;AAAA,UACJ,WAAW;AAAA,UACX,eAAe;AAAA,UACf;AAAA;AAAA,SAGJ,KAAK,qBAAS,yBACf,KAAK,CAAC,EAAC,cAAc,eAAc;AAClC,YAAI,CAAC,UAAU;AACb,gBAAM,IAAI,MAAM;AAAA;AAGlB,6BAAM,IACJ,+BACA;AAAA,UACE,SAAS;AAAA,YACP,iBAAiB,SAAS;AAAA,YAC1B,gBAAgB;AAAA,YAChB,UAAU;AAAA;AAAA,WAGd,KAAK,qBAAS,yBACf,KAAK,CAAC,gBAAgB;AACrB,cAAI,CAAC,mBAAmB,OAAO,CAAC,GAAG,MAAM,KAAK,OAAO,KAAK,aAAa,SAAS,IAAI,OAAO;AACzF,kBAAM,IAAI,MAAM;AAAA;AAGlB,gBAAM,UAAyD,mBAAmB,OAChF,CAAC,GAAG,MAAM;AACR,cAAE,KAAK,YAAY;AACnB,mBAAO;AAAA,aAET;AAGF,kBAAQ;AAAA,WACP,MAAM,CAAC,MAAM;AACd,iBAAO,EAAE;AAAA;AAAA,SAGZ,MAAM,CAAC,MAAM;AACZ,eAAO,EAAE;AAAA;AAAA,aAEJ,GAAP;AACA,aAAO,EAAE;AAAA;AAAA,KAEV,KAAK,CAAC,YAAa,GAAE,YAAa,MAAO,CAAC,UAAW,GAAE;AAAA;",
  "names": []
}
