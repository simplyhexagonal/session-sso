{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import googleProvider from './providers/google';\nimport facebookProvider from './providers/facebook';\nimport githubProvider from './providers/github';\nimport customProvider from './providers/custom';\n\nimport customGenerator from './generators/custom';\n\nimport {\n  SSOProviderMap,\n  SSOGeneratorMap,\n  SessionSSOOptions,\n  GenerateSSO,\n  VerifySSO,\n  SSOGenerator,\n  SSOProvider,\n} from './interfaces';\n\nconst ssoProviders: Partial<SSOProviderMap> = {\n  google: googleProvider,\n  facebook: facebookProvider,\n  github: githubProvider,\n  custom: customProvider,\n};\n\nconst ssoGenerators: Partial<SSOGeneratorMap> = {\n  custom: customGenerator,\n};\n\nclass SessionSSO {\n  defaultProvider: keyof SSOProviderMap;\n  defaultGenerator: keyof SSOGeneratorMap;\n  providerSpecificOptions: { [key: string]: unknown };\n\n  constructor(\n    {\n      defaultProvider,\n      defaultGenerator,\n      ...providerSpecificOptions\n    }: SessionSSOOptions = {},\n  ) {\n    this.defaultProvider = defaultProvider || 'custom';\n    this.defaultGenerator = defaultGenerator || 'custom';\n    this.providerSpecificOptions = providerSpecificOptions;\n  }\n\n  generateSSO = <GenerateSSO>(async (\n    {\n      generator = this.defaultGenerator,\n      authorizationPromise,\n      privateKeyPromise,\n    }\n  ) => {\n    if (generator === 'custom' && !(authorizationPromise && privateKeyPromise)) {\n      throw new Error('cannot perform custom sso without auth and private key promises');\n    }\n\n    return (ssoGenerators[generator] as SSOGenerator)({\n      authorizationPromise,\n      privateKeyPromise,\n    });\n  });\n\n  verifySSO = <VerifySSO>(async (\n    {\n      provider = this.defaultProvider,\n      authKey,\n      retrieveProperties,\n      ...providerSpecificOptions\n    },\n  ) => {\n    if (provider === 'custom' && !providerSpecificOptions.publicKeyPromise) {\n      throw new Error('cannot perform custom sso without a public key');\n    }\n\n    return await (ssoProviders[provider] as SSOProvider)({\n      authKey,\n      retrieveProperties,\n      ...this.providerSpecificOptions,\n      ...providerSpecificOptions,\n    });\n  });\n}\n\nexport default SessionSSO;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,oBAA2B;AAC3B,sBAA6B;AAC7B,oBAA2B;AAC3B,oBAA2B;AAE3B,qBAA4B;AAY5B,MAAM,eAAwC;AAAA,EAC5C,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,QAAQ;AAAA;AAGV,MAAM,gBAA0C;AAAA,EAC9C,QAAQ;AAAA;AAGV,iBAAiB;AAAA,EAKf,YACE;AAAA,IACE;AAAA,IACA;AAAA,OACG;AAAA,MACkB,IACvB;AAMF,uBAA4B,OAC1B;AAAA,MACE,YAAY,KAAK;AAAA,MACjB;AAAA,MACA;AAAA,UAEC;AACH,UAAI,cAAc,YAAY,CAAE,yBAAwB,oBAAoB;AAC1E,cAAM,IAAI,MAAM;AAAA;AAGlB,aAAQ,cAAc,WAA4B;AAAA,QAChD;AAAA,QACA;AAAA;AAAA;AAIJ,qBAAwB,OACtB;AAAA,MACE,WAAW,KAAK;AAAA,MAChB;AAAA,MACA;AAAA,SACG;AAAA,UAEF;AACH,UAAI,aAAa,YAAY,CAAC,wBAAwB,kBAAkB;AACtE,cAAM,IAAI,MAAM;AAAA;AAGlB,aAAO,MAAO,aAAa,UAA0B;AAAA,QACnD;AAAA,QACA;AAAA,WACG,KAAK;AAAA,WACL;AAAA;AAAA;AAtCL,SAAK,kBAAkB,mBAAmB;AAC1C,SAAK,mBAAmB,oBAAoB;AAC5C,SAAK,0BAA0B;AAAA;AAAA;AAyCnC,IAAO,cAAQ;",
  "names": []
}
